@using Jane.Infrastructure
@model Jane.Models.Comment
@{
    Layout = null;
}

@if (ViewBag.BannedCommenter == true)
{
}
else
{
    <hr />
    <div>
        <div id="summary"></div>
        <h4>@(Model.ReplyCommentId.HasValue ? "Please be nice..." : "Thoughts? Musings? Ponderances?")</h4>
        <div>
            @using (Html.BeginForm("AddComment", "PostComments", FormMethod.Post, new { id = "AddCommentForm" }))
            {
                @Html.AntiForgeryToken()
                @Html.HiddenFor(model => model.PostId)
                @Html.HiddenFor(model => model.ReplyCommentId)
                @Html.HiddenFor(model => model.CommenterId)
                <div class="row">
                    <div class="small-2 columns">
                        @Html.LabelFor(model => model.Name, new { @class = "inline right" })
                    </div>
                    <div class="small-10 columns">
                        @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @placeholder = "What should we call you?" } })
                        @Html.ValidationMessageFor(model => model.Name)
                    </div>
                </div>
                <div class="row">
                    <div class="small-2 columns">
                        @Html.LabelFor(model => model.Email, new { @class = "inline right" })
                    </div>
                    <div class="small-10 columns">
                        @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @placeholder = "Email address" } })
                        @Html.ValidationMessageFor(model => model.Email)
                    </div>
                </div>
                <div class="row">
                    <div class="small-2 columns">
                        @Html.LabelFor(model => model.Url, new { @class = "inline right" })
                    </div>
                    <div class="small-10 columns">
                        @Html.EditorFor(model => model.Url, new { htmlAttributes = new { @placeholder = "URL" } })
                        @Html.ValidationMessageFor(model => model.Url)
                    </div>
                </div>
                <div class="row">
                    <div class="small-2 columns">
                        @Html.LabelFor(model => model.Body, new { @class = "inline right" })
                    </div>
                    <div class="small-10 columns">
                        @Html.TextAreaFor(model => model.Body, 6, 50, new { @placeholder = "Your insightful comment here..." })
                        @Html.ValidationMessageFor(model => model.Body)
                    </div>
                </div>

                <script src="https://www.google.com/recaptcha/api.js" async defer></script>

                <div class="row">
                    <div class="small-offset-2 small-10 columns">
                        <div class="g-recaptcha" data-sitekey="@SiteConfiguration.RecaptchaPublicKey.Value"></div>
                    </div>
                </div>

                <div class="row">
                    <div class="small-offset-2 small-10 columns">
                        <input type="submit" class="button tiny" value="@(Model.ReplyCommentId.HasValue ? "Post Reply" : "Post Comment")" />
                        <div id="AddCommentSummary"></div>
                    </div>
                </div>
            }
        </div>
    </div>
    <script src="~/Scripts/AddComment.js"></script>
}

@Scripts.Render("~/bundles/jqueryval")